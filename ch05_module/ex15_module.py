# 파이썬 기초 (+카카오톡 챗봇) 스터디 3주차

# python 모듈
# 1. 생성 및 활용.


# 1.1 생성 및 호출
print("\n[ 1.1 생성 및 호출 ] ──────────────────────────────────────────────────────────────────────────────────────\n")

# calc.py 호출

import calc

print(type(calc))

print(calc.add(10, 20))


# from 키워드
print("\n# from 키워드")

from calc import add, sub

a = add(10, 20)
print("add = {}".format(a))

b = sub(20, 10)
print("sub = {}".format(b))


# 1.2 다양한 방식으로 불러오기
print("\n[ 1.2 다양한 방식으로 불러오기 ] ──────────────────────────────────────────────────────────────────────────\n")

# 모듈에 있는 전체를 가져오기.

from calc import *


print(mul(10, 10))


'''

import 모듈명


from 모듈명 import *


위 두 방식은 둘다 모듈 전체를 가져온다는 점에서 목적은 같지만, 사용하는 방식이 약간 다름.

import 모듈명 호출하는 경우와 다르게, from 과 * 를 사용해서 모듈을 호출할 경우,
전역변수나 static 처럼 굳이 바로 모듈 안의 속성이나 클래스, 함수 등을 호출할 수 있다.

둘 중 어느쪽이 메모리에 더 부담되는 방식인지는 확인하지 못함.

'''


# as 키워드
print("\n# as 키워드")

from calc import Formatter as f

print(f.comma(123456789))


# 1.3 경로가 다른 경우
print("\n[ 1.3 경로가 다른 경우 ] ──────────────────────────────────────────────────────────────────────────────────\n")


# 절대 경로
print("\n# 절대 경로")

import ch05_module.sub_dir.sub_md as sd

sd.showMd()


# 상대 경로
print("\n# 상대 경로")

# 현재 실행파일의 위치에서 하위 폴더는 현재 위치 보다 상위 경로를 생략하고 나타낼 수 있음.
import sub_dir.sub_md as sd2


sd2.showMd()


# 상위 경로에 있는 모듈을 상대 경로로 import 하고자할 경우, 바로 가져오는 것은 불가능하고,
# sys 내장 모듈을 이용해서 가져오고자 하는 모듈의 절대경로를 sys.path 에 추가해줘야 함.

'''
import sys

sys.path.append("C://가져오고자 할 경로")
'''


# 이럴 바에야 그냥 프로젝트 root 부터 시작하는 절대경로로 지정하는 게 훨씬 낫고, 명료함.
# 여러모로 Python 에서는 상대 경로로 import 할 것을 권장하지 않으니 절대 경로 사용을 권장함.

'''
sys.path 에 경로를 추가하는 것은, 상대 경로에서 상위 폴더를 지정하기 보다
외부 라이브러리만 따로 특정 디렉토리에 모아놓고, 그 경로를 추가하여 별도로 관리하는 용도가 더 적합함.

import 검색 순서

1. sys.modules
2. built-in modules
3. sys.path

sys.modules         : 현재 프로젝트에서 사용하고 있는 모듈과 패키지가 딕셔너리 형태로 담겨있다.
built-in modules    : 파이썬 설치기 기본 내장 함수. C 언어로 작성되어 파이썬에서 볼 수 없다.
sys.path            : 현재 프로젝트에서 모듈과 패키지를 검색할 경로가 리스트 형태로 담겨있다.

여기서 찾지 못하면 ModuleNotFoundError 를 return 함.

'''


# 1.4 __name__ == "__main__" 의 의미
print('\n[ # 1.4 __name__ == "__main__" 의 의미 ] ──────────────────────────────────────────────────────────────────\n')

# 현재 위치에서 바로 실행될 경우(=인터프리터에서 실행), __name__ 에는 "__main__" 값이 지정됨.
print(__name__)

# import 할 경우, __name__ 에는 모듈명이 값으로 삽입됨.

sd.showName()
sd2.showName()

# 절대경로 일 경우와, 상대 경로일 경우의 __name__ 값이 다르지만, as 키워드로 지정 별칭은 값으로 삽입되지 않음.
